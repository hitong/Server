// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message_2eproto;
namespace Protocol {
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class Head;
class HeadDefaultTypeInternal;
extern HeadDefaultTypeInternal _Head_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::File* Arena::CreateMaybeMessage<::Protocol::File>(Arena*);
template<> ::Protocol::Head* Arena::CreateMaybeMessage<::Protocol::Head>(Arena*);
template<> ::Protocol::User* Arena::CreateMaybeMessage<::Protocol::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum Head_CMD : int {
  Head_CMD_USER = 0,
  Head_CMD_RESULT = 1,
  Head_CMD_MESSAGE = 2,
  Head_CMD_FILE = 3,
  Head_CMD_Head_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Head_CMD_Head_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Head_CMD_IsValid(int value);
constexpr Head_CMD Head_CMD_CMD_MIN = Head_CMD_USER;
constexpr Head_CMD Head_CMD_CMD_MAX = Head_CMD_FILE;
constexpr int Head_CMD_CMD_ARRAYSIZE = Head_CMD_CMD_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Head_CMD_descriptor();
template<typename T>
inline const std::string& Head_CMD_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Head_CMD>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Head_CMD_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Head_CMD_descriptor(), enum_t_value);
}
inline bool Head_CMD_Parse(
    const std::string& name, Head_CMD* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Head_CMD>(
    Head_CMD_descriptor(), name, value);
}
// ===================================================================

class User :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.User";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Message_2eproto);
    return ::descriptor_table_Message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsrFieldNumber = 1,
    kPswFieldNumber = 2,
  };
  // bytes usr = 1;
  void clear_usr();
  const std::string& usr() const;
  void set_usr(const std::string& value);
  void set_usr(std::string&& value);
  void set_usr(const char* value);
  void set_usr(const void* value, size_t size);
  std::string* mutable_usr();
  std::string* release_usr();
  void set_allocated_usr(std::string* usr);
  private:
  const std::string& _internal_usr() const;
  void _internal_set_usr(const std::string& value);
  std::string* _internal_mutable_usr();
  public:

  // bytes psw = 2;
  void clear_psw();
  const std::string& psw() const;
  void set_psw(const std::string& value);
  void set_psw(std::string&& value);
  void set_psw(const char* value);
  void set_psw(const void* value, size_t size);
  std::string* mutable_psw();
  std::string* release_psw();
  void set_allocated_psw(std::string* psw);
  private:
  const std::string& _internal_psw() const;
  void _internal_set_psw(const std::string& value);
  std::string* _internal_mutable_psw();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.User)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class File :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline File* New() const final {
    return CreateMaybeMessage<File>(nullptr);
  }

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<File>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.File";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Message_2eproto);
    return ::descriptor_table_Message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
  };
  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.File)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class Head :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Head) */ {
 public:
  Head();
  virtual ~Head();

  Head(const Head& from);
  Head(Head&& from) noexcept
    : Head() {
    *this = ::std::move(from);
  }

  inline Head& operator=(const Head& from) {
    CopyFrom(from);
    return *this;
  }
  inline Head& operator=(Head&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Head& default_instance();

  enum SubMessageCase {
    kUser = 3,
    kFile = 4,
    SUBMESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Head* internal_default_instance() {
    return reinterpret_cast<const Head*>(
               &_Head_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Head& a, Head& b) {
    a.Swap(&b);
  }
  inline void Swap(Head* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Head* New() const final {
    return CreateMaybeMessage<Head>(nullptr);
  }

  Head* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Head>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Head& from);
  void MergeFrom(const Head& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Head* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Head";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Message_2eproto);
    return ::descriptor_table_Message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Head_CMD CMD;
  static constexpr CMD USER =
    Head_CMD_USER;
  static constexpr CMD RESULT =
    Head_CMD_RESULT;
  static constexpr CMD MESSAGE =
    Head_CMD_MESSAGE;
  static constexpr CMD FILE =
    Head_CMD_FILE;
  static inline bool CMD_IsValid(int value) {
    return Head_CMD_IsValid(value);
  }
  static constexpr CMD CMD_MIN =
    Head_CMD_CMD_MIN;
  static constexpr CMD CMD_MAX =
    Head_CMD_CMD_MAX;
  static constexpr int CMD_ARRAYSIZE =
    Head_CMD_CMD_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_descriptor() {
    return Head_CMD_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_Name.");
    return Head_CMD_Name(enum_t_value);
  }
  static inline bool CMD_Parse(const std::string& name,
      CMD* value) {
    return Head_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 2,
    kCmdFieldNumber = 1,
    kUserFieldNumber = 3,
    kFileFieldNumber = 4,
  };
  // int64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Protocol.Head.CMD cmd = 1;
  void clear_cmd();
  ::Protocol::Head_CMD cmd() const;
  void set_cmd(::Protocol::Head_CMD value);
  private:
  ::Protocol::Head_CMD _internal_cmd() const;
  void _internal_set_cmd(::Protocol::Head_CMD value);
  public:

  // .Protocol.User user = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::Protocol::User& user() const;
  ::Protocol::User* release_user();
  ::Protocol::User* mutable_user();
  void set_allocated_user(::Protocol::User* user);
  private:
  const ::Protocol::User& _internal_user() const;
  ::Protocol::User* _internal_mutable_user();
  public:

  // .Protocol.File file = 4;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::Protocol::File& file() const;
  ::Protocol::File* release_file();
  ::Protocol::File* mutable_file();
  void set_allocated_file(::Protocol::File* file);
  private:
  const ::Protocol::File& _internal_file() const;
  ::Protocol::File* _internal_mutable_file();
  public:

  void clear_SubMessage();
  SubMessageCase SubMessage_case() const;
  // @@protoc_insertion_point(class_scope:Protocol.Head)
 private:
  class _Internal;
  void set_has_user();
  void set_has_file();

  inline bool has_SubMessage() const;
  inline void clear_has_SubMessage();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  int cmd_;
  union SubMessageUnion {
    SubMessageUnion() {}
    ::Protocol::User* user_;
    ::Protocol::File* file_;
  } SubMessage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// bytes usr = 1;
inline void User::clear_usr() {
  usr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::usr() const {
  // @@protoc_insertion_point(field_get:Protocol.User.usr)
  return _internal_usr();
}
inline void User::set_usr(const std::string& value) {
  _internal_set_usr(value);
  // @@protoc_insertion_point(field_set:Protocol.User.usr)
}
inline std::string* User::mutable_usr() {
  // @@protoc_insertion_point(field_mutable:Protocol.User.usr)
  return _internal_mutable_usr();
}
inline const std::string& User::_internal_usr() const {
  return usr_.GetNoArena();
}
inline void User::_internal_set_usr(const std::string& value) {
  
  usr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_usr(std::string&& value) {
  
  usr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.User.usr)
}
inline void User::set_usr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.User.usr)
}
inline void User::set_usr(const void* value, size_t size) {
  
  usr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.User.usr)
}
inline std::string* User::_internal_mutable_usr() {
  
  return usr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_usr() {
  // @@protoc_insertion_point(field_release:Protocol.User.usr)
  
  return usr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_usr(std::string* usr) {
  if (usr != nullptr) {
    
  } else {
    
  }
  usr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usr);
  // @@protoc_insertion_point(field_set_allocated:Protocol.User.usr)
}

// bytes psw = 2;
inline void User::clear_psw() {
  psw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::psw() const {
  // @@protoc_insertion_point(field_get:Protocol.User.psw)
  return _internal_psw();
}
inline void User::set_psw(const std::string& value) {
  _internal_set_psw(value);
  // @@protoc_insertion_point(field_set:Protocol.User.psw)
}
inline std::string* User::mutable_psw() {
  // @@protoc_insertion_point(field_mutable:Protocol.User.psw)
  return _internal_mutable_psw();
}
inline const std::string& User::_internal_psw() const {
  return psw_.GetNoArena();
}
inline void User::_internal_set_psw(const std::string& value) {
  
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_psw(std::string&& value) {
  
  psw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.User.psw)
}
inline void User::set_psw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.User.psw)
}
inline void User::set_psw(const void* value, size_t size) {
  
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.User.psw)
}
inline std::string* User::_internal_mutable_psw() {
  
  return psw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_psw() {
  // @@protoc_insertion_point(field_release:Protocol.User.psw)
  
  return psw_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_psw(std::string* psw) {
  if (psw != nullptr) {
    
  } else {
    
  }
  psw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), psw);
  // @@protoc_insertion_point(field_set_allocated:Protocol.User.psw)
}

// -------------------------------------------------------------------

// File

// string file_name = 1;
inline void File::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& File::file_name() const {
  // @@protoc_insertion_point(field_get:Protocol.File.file_name)
  return _internal_file_name();
}
inline void File::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:Protocol.File.file_name)
}
inline std::string* File::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.File.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& File::_internal_file_name() const {
  return file_name_.GetNoArena();
}
inline void File::_internal_set_file_name(const std::string& value) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void File::set_file_name(std::string&& value) {
  
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.File.file_name)
}
inline void File::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.File.file_name)
}
inline void File::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.File.file_name)
}
inline std::string* File::_internal_mutable_file_name() {
  
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* File::release_file_name() {
  // @@protoc_insertion_point(field_release:Protocol.File.file_name)
  
  return file_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:Protocol.File.file_name)
}

// -------------------------------------------------------------------

// Head

// .Protocol.Head.CMD cmd = 1;
inline void Head::clear_cmd() {
  cmd_ = 0;
}
inline ::Protocol::Head_CMD Head::_internal_cmd() const {
  return static_cast< ::Protocol::Head_CMD >(cmd_);
}
inline ::Protocol::Head_CMD Head::cmd() const {
  // @@protoc_insertion_point(field_get:Protocol.Head.cmd)
  return _internal_cmd();
}
inline void Head::_internal_set_cmd(::Protocol::Head_CMD value) {
  
  cmd_ = value;
}
inline void Head::set_cmd(::Protocol::Head_CMD value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:Protocol.Head.cmd)
}

// int64 size = 2;
inline void Head::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Head::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Head::size() const {
  // @@protoc_insertion_point(field_get:Protocol.Head.size)
  return _internal_size();
}
inline void Head::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void Head::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Protocol.Head.size)
}

// .Protocol.User user = 3;
inline bool Head::_internal_has_user() const {
  return SubMessage_case() == kUser;
}
inline bool Head::has_user() const {
  return _internal_has_user();
}
inline void Head::set_has_user() {
  _oneof_case_[0] = kUser;
}
inline void Head::clear_user() {
  if (_internal_has_user()) {
    delete SubMessage_.user_;
    clear_has_SubMessage();
  }
}
inline ::Protocol::User* Head::release_user() {
  // @@protoc_insertion_point(field_release:Protocol.Head.user)
  if (_internal_has_user()) {
    clear_has_SubMessage();
      ::Protocol::User* temp = SubMessage_.user_;
    SubMessage_.user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Protocol::User& Head::_internal_user() const {
  return _internal_has_user()
      ? *SubMessage_.user_
      : *reinterpret_cast< ::Protocol::User*>(&::Protocol::_User_default_instance_);
}
inline const ::Protocol::User& Head::user() const {
  // @@protoc_insertion_point(field_get:Protocol.Head.user)
  return _internal_user();
}
inline ::Protocol::User* Head::_internal_mutable_user() {
  if (!_internal_has_user()) {
    clear_SubMessage();
    set_has_user();
    SubMessage_.user_ = CreateMaybeMessage< ::Protocol::User >(
        GetArenaNoVirtual());
  }
  return SubMessage_.user_;
}
inline ::Protocol::User* Head::mutable_user() {
  // @@protoc_insertion_point(field_mutable:Protocol.Head.user)
  return _internal_mutable_user();
}

// .Protocol.File file = 4;
inline bool Head::_internal_has_file() const {
  return SubMessage_case() == kFile;
}
inline bool Head::has_file() const {
  return _internal_has_file();
}
inline void Head::set_has_file() {
  _oneof_case_[0] = kFile;
}
inline void Head::clear_file() {
  if (_internal_has_file()) {
    delete SubMessage_.file_;
    clear_has_SubMessage();
  }
}
inline ::Protocol::File* Head::release_file() {
  // @@protoc_insertion_point(field_release:Protocol.Head.file)
  if (_internal_has_file()) {
    clear_has_SubMessage();
      ::Protocol::File* temp = SubMessage_.file_;
    SubMessage_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Protocol::File& Head::_internal_file() const {
  return _internal_has_file()
      ? *SubMessage_.file_
      : *reinterpret_cast< ::Protocol::File*>(&::Protocol::_File_default_instance_);
}
inline const ::Protocol::File& Head::file() const {
  // @@protoc_insertion_point(field_get:Protocol.Head.file)
  return _internal_file();
}
inline ::Protocol::File* Head::_internal_mutable_file() {
  if (!_internal_has_file()) {
    clear_SubMessage();
    set_has_file();
    SubMessage_.file_ = CreateMaybeMessage< ::Protocol::File >(
        GetArenaNoVirtual());
  }
  return SubMessage_.file_;
}
inline ::Protocol::File* Head::mutable_file() {
  // @@protoc_insertion_point(field_mutable:Protocol.Head.file)
  return _internal_mutable_file();
}

inline bool Head::has_SubMessage() const {
  return SubMessage_case() != SUBMESSAGE_NOT_SET;
}
inline void Head::clear_has_SubMessage() {
  _oneof_case_[0] = SUBMESSAGE_NOT_SET;
}
inline Head::SubMessageCase Head::SubMessage_case() const {
  return Head::SubMessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::Head_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::Head_CMD>() {
  return ::Protocol::Head_CMD_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
